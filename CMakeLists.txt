cmake_minimum_required(VERSION 2.8)

project(n3ldg_plus CXX)

if(CMAKE_BUILD_TYPE MATCHES debug)
    add_definitions(-DN3LDG_DEBUG)
    set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -msse3 -std=c++14 -O1" )
elseif(CMAKE_BUILD_TYPE MATCHES profile)
    set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++14 -O2 -pg -DNDEBUG" )
else()
    set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fPIC -std=c++14 -Ofast -march=native" )
endif()

include_directories(include)
include_directories(include/fmt/include)
add_subdirectory(include/fmt)
aux_source_directory(include/n3ldg-plus/base n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus/block n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus/computation-graph n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus/loss n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus/nlp n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus/operator n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus/optimizer n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus/param n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus/util n3ldg_plus_src)
aux_source_directory(include/n3ldg-plus n3ldg_plus_src)

add_library(n3ldg_plus STATIC ${n3ldg_plus_src})
target_include_directories(n3ldg_plus PUBLIC include PUBLIC include/fmt/include)
target_link_libraries(n3ldg_plus fmt)
